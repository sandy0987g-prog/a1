{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"production-start.sh":{"content":"#!/bin/bash\n\n# Create data directory for MongoDB\nmkdir -p .mongodb/data\n\n# Cleanup function to stop MongoDB gracefully\ncleanup() {\n    echo \"Shutting down MongoDB...\"\n    if [ ! -z \"$MONGO_PID\" ] && kill -0 $MONGO_PID 2>/dev/null; then\n        kill $MONGO_PID\n        wait $MONGO_PID 2>/dev/null\n    fi\n    exit\n}\n\n# Set up trap to call cleanup on script exit\ntrap cleanup EXIT INT TERM\n\n# Start MongoDB in the background\necho \"Starting MongoDB...\"\nmongod --dbpath .mongodb/data --bind_ip 127.0.0.1 --port 27017 --noauth --logpath .mongodb/mongodb.log &\nMONGO_PID=$!\n\n# Wait for MongoDB to be ready\necho \"Waiting for MongoDB to start...\"\nfor i in {1..30}; do\n  if mongosh --eval \"db.runCommand({ ping: 1 })\" --quiet > /dev/null 2>&1 || mongo --eval \"db.runCommand({ ping: 1 })\" --quiet > /dev/null 2>&1; then\n    echo \"MongoDB is ready!\"\n    break\n  fi\n  if [ $i -eq 30 ]; then\n    echo \"MongoDB failed to start in time\"\n    cat .mongodb/mongodb.log 2>/dev/null || echo \"No MongoDB log available\"\n    exit 1\n  fi\n  sleep 1\ndone\n\n# Start the production server (this will run in the foreground)\nexport NODE_ENV=production\nexec node dist/index.js\n","size_bytes":1144},"replit.md":{"content":"# Parcel Processing Dashboard\n\n## Overview\nA full-stack parcel processing and distribution center management system built with React, Express, and MongoDB.\n\n## Project Structure\n- **Frontend**: React with Vite, located in `client/` directory\n- **Backend**: Express server with CommonJS modules in `server/` directory\n- **Database**: MongoDB (local instance managed by startup scripts)\n- **Shared**: Common schemas and types in `shared/` directory\n\n## Key Configuration\n- The project uses a mixed module system:\n  - Root package.json has `\"type\": \"module\"` for ES modules (required by vite.config.js)\n  - Server and shared directories have their own package.json with `\"type\": \"commonjs\"` for CommonJS modules\n- MongoDB is started automatically via the `start.sh` script\n- Server binds to `0.0.0.0:5000` for Replit's proxy to work correctly\n- Vite is configured with `allowedHosts: true` for Replit's iframe preview\n\n## Development\n- Run `npm run dev` to start the development server (via the Server workflow)\n- The workflow automatically starts MongoDB and the Express server with Vite middleware\n- Access the app through Replit's webview on port 5000\n\n## Deployment\n- Deployment type: VM (required for MongoDB state persistence)\n- Build command: `npm run build`\n- Run command: `bash production-start.sh`\n- The production script starts MongoDB and runs the built application\n\n## Important Files\n- `start.sh`: Development startup script (starts MongoDB + dev server)\n- `production-start.sh`: Production startup script (starts MongoDB + production server)\n- `vite.config.js`: Vite configuration (ES module format)\n- `server/package.json`: Marks server directory as CommonJS\n- `shared/package.json`: Marks shared directory as CommonJS\n\n## Recent Changes (2025-09-30)\n- Set up for Replit environment\n- Configured MongoDB to run locally\n- Fixed module system compatibility (mixed ESM/CommonJS)\n- Updated vite.config.js to proper ES module format\n- Fixed client entry point reference (main.jsx)\n- Configured server to bind to 0.0.0.0:5000\n- Set up deployment configuration for Replit VM\n\nTasks :\n1.\tUnit Testing (Full Stack)\n\t•\tImplement unit tests for both client and server.\n\t•\tUse Jest / Mocha for backend, and React Testing Library for frontend.\n\t•\tEnsure critical APIs and UI components are covered.\n\t2.\tRemove Unnecessary Console Logs\n\t•\tClean up console.log() statements from both frontend and backend.\n\t•\tKeep only meaningful logs (error handling, important events).\n\t•\tMaintain logging best practices with proper levels (info, warn, error).\n\t3.\tAdd Department with Proper UI\n\t•\tCreate new Department management UI.\n\t•\tSupport CRUD operations (Add, View, Edit, Delete).\n\t•\tEnsure integration with backend APIs.\n\t•\tFollow consistent design with existing UI components.\n\t4.\tCode Quality & Cleanup\n\t•\tRefactor client code for readability and maintainability.\n\t•\tFollow clean code principles (DRY, modularity, naming conventions).\n\t•\tApply ESLint + Prettier for consistent formatting.\n\t•\tEnsure overall project quality for both client and server.","size_bytes":3074},"start.sh":{"content":"#!/bin/bash\n\n# Create data directory for MongoDB\nmkdir -p .mongodb/data\n\n# Cleanup function to stop MongoDB gracefully\ncleanup() {\n    echo \"Shutting down MongoDB...\"\n    if [ ! -z \"$MONGO_PID\" ] && kill -0 $MONGO_PID 2>/dev/null; then\n        kill $MONGO_PID\n        wait $MONGO_PID 2>/dev/null\n    fi\n    exit\n}\n\n# Set up trap to call cleanup on script exit\ntrap cleanup EXIT INT TERM\n\n# Start MongoDB in the background\necho \"Starting MongoDB...\"\nmongod --dbpath .mongodb/data --bind_ip 127.0.0.1 --port 27017 --noauth --logpath .mongodb/mongodb.log &\nMONGO_PID=$!\n\n# Wait for MongoDB to be ready\necho \"Waiting for MongoDB to start...\"\nfor i in {1..30}; do\n  if mongo --eval \"db.runCommand({ ping: 1 })\" --quiet > /dev/null 2>&1; then\n    echo \"MongoDB is ready!\"\n    break\n  fi\n  if [ $i -eq 30 ]; then\n    echo \"MongoDB failed to start in time\"\n    cat .mongodb/mongodb.log 2>/dev/null || echo \"No MongoDB log available\"\n    exit 1\n  fi\n  sleep 1\ndone\n\n# Start the development server (this will run in the foreground)\nexport NODE_ENV=development\nexec node -r tsconfig-paths/register server/index.js\n","size_bytes":1103},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n};","size_bytes":2750},"vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport runtimeErrorModal from '@replit/vite-plugin-runtime-error-modal';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Dynamically import Replit plugins in development\nconst replitPlugins = process.env.NODE_ENV !== 'production' && process.env.REPL_ID !== undefined\n  ? await Promise.all([\n      import('@replit/vite-plugin-cartographer').then((m) => m.cartographer()),\n      import('@replit/vite-plugin-dev-banner').then((m) => m.devBanner()),\n    ])\n  : [];\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorModal(),\n    ...replitPlugins,\n  ],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'client', 'src'),\n      '@shared': path.resolve(__dirname, 'shared'),\n      '@assets': path.resolve(__dirname, 'attached_assets'),\n    },\n  },\n  root: path.resolve(__dirname, 'client'),\n  build: {\n    outDir: path.resolve(__dirname, 'dist/public'),\n    emptyOutDir: true,\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: false,\n    fs: {\n      strict: true,\n      deny: ['**/.*'],\n    },\n  },\n});\n","size_bytes":1211},"server/index.js":{"content":"import express from 'express';\nimport { registerRoutes } from './routes.js';\nimport { setupVite, log, serveStatic } from './vite.js';\nimport { setupIndexes, setupValidation } from './db/setup.js';\nimport { createServer } from 'net';\n\nconst app = express();\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// ✅ Logging middleware (only method, path, status, duration)\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    await setupIndexes();\n    await setupValidation();\n    console.log('MongoDB setup completed successfully');\n  } catch (error) {\n    console.error('Failed to setup MongoDB:', error);\n    process.exit(1);\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err, _req, res, _next) => {\n    console.error('Error:', err);\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const findAvailablePort = async (startPort) => {\n    return new Promise((resolve, reject) => {\n      const testServer = createServer();\n      testServer.unref();\n\n      const tryPort = (port) => {\n        testServer.once('error', (err) => {\n          if (err.code === 'EADDRINUSE') {\n            tryPort(port + 1);\n          } else {\n            reject(err);\n          }\n        });\n\n        testServer.once('listening', () => {\n          testServer.close(() => resolve(port));\n        });\n\n        testServer.listen(port);\n      };\n\n      tryPort(startPort);\n    });\n  };\n\n  try {\n    const desiredPort = parseInt(process.env.PORT || '5000', 10);\n    const availablePort = await findAvailablePort(desiredPort);\n\n    server.listen(availablePort, '0.0.0.0', () => {\n      log(`Server is running at http://0.0.0.0:${availablePort}`);\n      log('Development mode enabled: Vite middleware is active');\n    });\n\n    server.on('error', (error) => {\n      if (error.code === 'EADDRINUSE') {\n        log(`Port ${availablePort} is already in use. Trying another port...`);\n      } else {\n        log(`Server error: ${error.message}`);\n      }\n    });\n  } catch (error) {\n    log(`Failed to start server: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    \n    if (error instanceof Error && error.message.includes('EADDRINUSE')) {\n      log('Attempting to start on a different port...');\n      const newPort = parseInt(process.env.PORT || '5000', 10) + 1;\n      process.env.PORT = newPort.toString();\n      \n      setTimeout(() => {\n        log(`Retrying with port ${newPort}...`);\n        server.listen(newPort, '0.0.0.0');\n      }, 1000);\n    } else {\n      process.exit(1);\n    }\n  }\n})();\n","size_bytes":3135},"server/routes.js":{"content":"import { createServer } from 'http';\nimport { storage } from './storage.js';\nimport { xmlParser } from './services/xmlParser.js';\nimport { businessRulesEngine } from './services/businessRules.js';\nimport { insertParcelSchema, insertDepartmentSchema } from '../shared/schema.js';\nimport { z } from 'zod';\nimport multer from 'multer';\nimport { readFile, unlink } from 'fs/promises';\n\nconst upload = multer({\n  dest: 'uploads/',\n  fileFilter: (_req, file, cb) => {\n    // Accept both .xml files and text/xml MIME type\n    if (file.originalname.toLowerCase().endsWith('.xml') ||\n        file.mimetype === 'text/xml' ||\n        file.mimetype === 'application/xml') {\n      cb(null, true);\n    } else {\n      cb(new Error('Only XML files are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app) {\n  // Get all parcels with optional filtering\n  app.get(\"/api/parcels\", async (req, res) => {\n    try {\n      const { department, status, search } = req.query;\n      let parcels = await storage.getAllParcels();\n\n      if (department && typeof department === 'string') {\n        parcels = parcels.filter(p => p.department === department);\n      }\n\n      if (status && typeof status === 'string') {\n        parcels = parcels.filter(p => p.status === status);\n      }\n\n      if (search && typeof search === 'string') {\n        const searchLower = search.toLowerCase();\n        parcels = parcels.filter(p => \n          p.parcelId.toLowerCase().includes(searchLower) ||\n          p.department.toLowerCase().includes(searchLower)\n        );\n      }\n\n      res.json(parcels);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Get single parcel\n  app.get(\"/api/parcels/:id\", async (req, res) => {\n    try {\n      const parcel = await storage.getParcel(req.params.id);\n      if (!parcel) {\n        return res.status(404).json({ message: \"Parcel not found\" });\n      }\n      res.json(parcel);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Create new parcel\n  app.post(\"/api/parcels\", async (req, res) => {\n    try {\n      const validatedData = insertParcelSchema.parse(req.body);\n      const parcel = await storage.createParcel(validatedData);\n      res.status(201).json(parcel);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid parcel data\", errors: error.errors });\n      }\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"An unexpected error occurred\"\n      });\n    }\n  });\n\n  // Update parcel\n  app.patch(\"/api/parcels/:id\", async (req, res) => {\n    try {\n      const parcel = await storage.updateParcel(req.params.id, req.body);\n      if (!parcel) {\n        return res.status(404).json({ message: \"Parcel not found\" });\n      }\n      res.json(parcel);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Upload and process XML file\n  app.post(\"/api/parcels/upload-xml\", upload.single('xmlFile'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No XML file provided\" });\n      }\n\n      let xmlContent;\n      try {\n        xmlContent = await readFile(req.file.path, 'utf8');\n        // Remove BOM if present\n        xmlContent = xmlContent.replace(/^\\uFEFF/, '');\n        // Log the entire XML content for debugging\n        console.log('XML Content:', xmlContent);\n        \n        // Check if the content starts with <?xml\n        if (!xmlContent.trim().startsWith('<?xml')) {\n          return res.status(400).json({ message: \"Invalid XML file: Missing XML declaration\" });\n        }\n      } catch (error) {\n        console.error('Error reading file:', error);\n        return res.status(400).json({ message: \"Error reading the uploaded file\" });\n      }\n\n      let parsedParcels;\n      try {\n        console.log('Attempting to parse XML content:', xmlContent);\n        parsedParcels = await xmlParser.parseXML(xmlContent);\n        console.log('Parsed parcels:', JSON.stringify(parsedParcels, null, 2));\n        console.log('Parsed parcels count:', parsedParcels.length);\n      } catch (error) {\n        console.error('XML parsing error:', error);\n        return res.status(400).json({\n          message: `Failed to parse XML file: ${error instanceof Error ? error.message : 'Unknown error'}`\n        });\n      }\n\n      // Clean up uploaded file\n      try {\n        await unlink(req.file.path);\n      } catch (error) {\n        console.error('Failed to cleanup uploaded file:', req.file.path, error);\n      }\n\n      if (!parsedParcels || parsedParcels.length === 0) {\n        return res.status(400).json({ message: \"No valid parcels found in the XML file\" });\n      }\n\n      const processedParcels = [];\n      const errors = [];\n\n      console.log('Starting parcel processing...');\n      for (const parsedParcel of parsedParcels) {\n        try {\n          console.log('Processing parcel:', JSON.stringify(parsedParcel, null, 2));\n          const insertParcel = xmlParser.convertToInsertParcel(parsedParcel);\n          console.log('Converted to insert format:', JSON.stringify(insertParcel, null, 2));\n          \n          const parcel = await businessRulesEngine.processParcel(insertParcel);\n          console.log('Successfully processed parcel:', JSON.stringify(parcel, null, 2));\n          processedParcels.push(parcel);\n        } catch (error) {\n          console.error('Error processing parcel:', parsedParcel.parcelId, error);\n          errors.push({\n            parcelId: parsedParcel.parcelId,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      console.log('Finished processing parcels. Success:', processedParcels.length, 'Errors:', errors.length);\n\n      res.json({\n        message: `Processed ${processedParcels.length} parcels${errors.length > 0 ? ` (${errors.length} errors)` : ''}`,\n        parcels: processedParcels,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      console.error('Error in upload-xml endpoint:', error);\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"An unexpected error occurred while processing the file\"\n      });\n    }\n  });\n\n  // Approve insurance for parcel\n  app.post(\"/api/parcels/:parcelId/approve-insurance\", async (req, res) => {\n    try {\n      const parcel = await businessRulesEngine.approveInsurance(req.params.parcelId);\n      if (!parcel) {\n        return res.status(404).json({ message: \"Parcel not found\" });\n      }\n      res.json(parcel);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Complete parcel processing\n  app.post(\"/api/parcels/:parcelId/complete\", async (req, res) => {\n    try {\n      const parcel = await businessRulesEngine.completeProcessing(req.params.parcelId);\n      if (!parcel) {\n        return res.status(404).json({ message: \"Parcel not found\" });\n      }\n      res.json(parcel);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Reset data\n  app.post(\"/api/reset\", async (_req, res) => {\n    try {\n      await storage.resetToDefaults();\n      res.json({ message: \"All data has been reset to defaults\" });\n    } catch (error) {\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"An unexpected error occurred\"\n      });\n    }\n  });\n\n\n\n\n\n  // Get dashboard metrics\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const allParcels = await storage.getAllParcels();\n      \n      const metrics = {\n        totalParcels: allParcels.length,\n        processed: allParcels.filter(p => p.status === 'completed').length,\n        pendingInsurance: allParcels.filter(p => p.status === 'insurance_review').length,\n        errors: allParcels.filter(p => p.status === 'error').length,\n        departments: {\n          mail: {\n            count: allParcels.filter(p => p.department === 'mail').length,\n            processed: allParcels.filter(p => p.department === 'mail' && p.status === 'completed').length,\n            pending: allParcels.filter(p => p.department === 'mail' && p.status !== 'completed').length\n          },\n          regular: {\n            count: allParcels.filter(p => p.department === 'regular').length,\n            processed: allParcels.filter(p => p.department === 'regular' && p.status === 'completed').length,\n            pending: allParcels.filter(p => p.department === 'regular' && p.status !== 'completed').length\n          },\n          heavy: {\n            count: allParcels.filter(p => p.department === 'heavy').length,\n            processed: allParcels.filter(p => p.department === 'heavy' && p.status === 'completed').length,\n            pending: allParcels.filter(p => p.department === 'heavy' && p.status !== 'completed').length\n          },\n          insurance: {\n            count: allParcels.filter(p => p.requiresInsurance).length,\n            approved: allParcels.filter(p => p.requiresInsurance && p.insuranceApproved).length,\n            reviewing: allParcels.filter(p => p.requiresInsurance && !p.insuranceApproved).length\n          }\n        }\n      };\n\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Get business rules\n  app.get(\"/api/business-rules\", async (req, res) => {\n    try {\n      const rules = await businessRulesEngine.getCurrentRules();\n      res.json(rules);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Update business rules\n  app.put(\"/api/business-rules\", async (req, res) => {\n    try {\n      await businessRulesEngine.updateRules(req.body);\n      const updatedRules = await businessRulesEngine.getCurrentRules();\n      res.json(updatedRules);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Get all departments\n  app.get(\"/api/departments\", async (req, res) => {\n    try {\n      const departments = await storage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Create new department\n  app.post(\"/api/departments\", async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.parse(req.body);\n      const department = await storage.createDepartment(validatedData);\n      res.status(201).json(department);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid department data\", errors: error.errors });\n      }\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"An unexpected error occurred\"\n      });\n    }\n  });\n\n  // Delete department\n  app.delete(\"/api/departments/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteDepartment(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Department not found\" });\n      }\n      res.json({ message: \"Department deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":11748},"server/storage.js":{"content":"import { randomUUID } from 'crypto';\nimport { MongoStorage } from './storage/MongoStorage.js';\n\nexport class MemStorage {\n  constructor() {\n    this.parcels = new Map();\n    this.businessRules = new Map();\n    this.departments = new Map();\n    \n    // Initialize default departments\n    this.initializeDefaultDepartments();\n    this.initializeDefaultBusinessRules();\n  }\n\n  initializeDefaultDepartments() {\n    const defaultDepartments = [\n      {\n        name: \"mail\",\n        description: \"Packages weighing up to 1kg\",\n        color: \"cyan\",\n        icon: \"envelope\",\n        isCustom: false\n      },\n      {\n        name: \"regular\",\n        description: \"Packages weighing 1-10kg\",\n        color: \"blue\",\n        icon: \"box\",\n        isCustom: false\n      },\n      {\n        name: \"heavy\",\n        description: \"Packages weighing over 10kg\",\n        color: \"orange\",\n        icon: \"weight-hanging\",\n        isCustom: false\n      },\n      {\n        name: \"insurance\",\n        description: \"High-value packages requiring approval\",\n        color: \"purple\",\n        icon: \"shield-alt\",\n        isCustom: false\n      }\n    ];\n\n    defaultDepartments.forEach(dept => {\n      const id = randomUUID();\n      const department = {\n        ...dept,\n        description: dept.description ?? null,\n        isCustom: dept.isCustom ?? false,\n        id,\n        createdAt: new Date()\n      };\n      this.departments.set(id, department);\n    });\n  }\n\n  initializeDefaultBusinessRules() {\n    const defaultRules = {\n      name: \"default\",\n      rules: {\n        mail: { maxWeight: 1.0 },\n        regular: { maxWeight: 10.0 },\n        insurance: { minValue: 1000.0, enabled: true }\n      },\n      isActive: true\n    };\n\n    const id = randomUUID();\n    const rules = {\n      ...defaultRules,\n      isActive: defaultRules.isActive ?? true,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.businessRules.set(id, rules);\n  }\n\n  async getParcel(id) {\n    return this.parcels.get(id);\n  }\n\n  async getParcelByParcelId(parcelId) {\n    return Array.from(this.parcels.values()).find((parcel) => parcel.parcelId === parcelId);\n  }\n\n  async createParcel(insertParcel) {\n    const id = randomUUID();\n    const now = new Date();\n    const parcel = {\n      ...insertParcel,\n      status: insertParcel.status ?? \"pending\",\n      requiresInsurance: insertParcel.requiresInsurance ?? false,\n      insuranceApproved: insertParcel.insuranceApproved ?? false,\n      processingTime: insertParcel.processingTime ?? now,\n      errorMessage: insertParcel.errorMessage ?? null,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.parcels.set(id, parcel);\n    return parcel;\n  }\n\n  async updateParcel(id, updates) {\n    const existing = this.parcels.get(id);\n    if (!existing) return undefined;\n\n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.parcels.set(id, updated);\n    return updated;\n  }\n\n  async getAllParcels() {\n    return Array.from(this.parcels.values()).sort((a, b) => \n      b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async getParcelsByDepartment(department) {\n    return Array.from(this.parcels.values()).filter(parcel => \n      parcel.department === department\n    );\n  }\n\n  async getParcelsByStatus(status) {\n    return Array.from(this.parcels.values()).filter(parcel => \n      parcel.status === status\n    );\n  }\n\n  async getBusinessRules() {\n    return Array.from(this.businessRules.values()).find(rules => rules.isActive);\n  }\n\n  async createBusinessRules(insertRules) {\n    const id = randomUUID();\n    const now = new Date();\n    const rules = {\n      ...insertRules,\n      isActive: insertRules.isActive ?? true,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.businessRules.set(id, rules);\n    return rules;\n  }\n\n  async updateBusinessRules(id, insertRules) {\n    const existing = this.businessRules.get(id);\n    if (!existing) return undefined;\n\n    const updated = {\n      ...existing,\n      ...insertRules,\n      updatedAt: new Date()\n    };\n    this.businessRules.set(id, updated);\n    return updated;\n  }\n\n  async getDepartment(id) {\n    return this.departments.get(id);\n  }\n\n  async getDepartmentByName(name) {\n    return Array.from(this.departments.values()).find(dept => dept.name === name);\n  }\n\n  async createDepartment(insertDepartment) {\n    const id = randomUUID();\n    const department = {\n      ...insertDepartment,\n      description: insertDepartment.description ?? null,\n      isCustom: insertDepartment.isCustom ?? false,\n      id,\n      createdAt: new Date()\n    };\n    this.departments.set(id, department);\n    return department;\n  }\n\n  async getAllDepartments() {\n    return Array.from(this.departments.values());\n  }\n\n  async deleteDepartment(id) {\n    return this.departments.delete(id);\n  }\n\n  async clearAllParcels() {\n    this.parcels.clear();\n  }\n\n  async resetToDefaults() {\n    // Clear all data\n    this.parcels.clear();\n    this.businessRules.clear();\n    this.departments.clear();\n    \n    // Reinitialize default data\n    this.initializeDefaultDepartments();\n    this.initializeDefaultBusinessRules();\n  }\n}\n\n// Use MongoDB storage instead of in-memory storage\nexport const storage = new MongoStorage();","size_bytes":5266},"server/vite.js":{"content":"import express from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { createServer, createLogger } from 'vite';\nimport { nanoid } from 'nanoid';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const viteConfig = await import(\"../vite.config.js\");\n  \n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createServer({\n    ...viteConfig.default,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        // Log the error but don't exit the process\n        log(`Vite error: ${msg}`, 'vite');\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(__dirname, \"..\", \"client\", \"index.html\");\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.jsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`\n      );\n\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2297},"shared/schema.js":{"content":"import { z } from 'zod';\n\nexport const parcelSchema = z.object({\n  id: z.string(),\n  parcelId: z.string(),\n  weight: z.number(),\n  value: z.number(),\n  department: z.string(),\n  status: z.string().default(\"pending\"),\n  requiresInsurance: z.boolean().default(false),\n  insuranceApproved: z.boolean().default(false),\n  processingTime: z.date().default(() => new Date()),\n  errorMessage: z.string().nullable(),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\nexport const businessRulesSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  rules: z.unknown(),\n  isActive: z.boolean().default(true),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\nexport const departmentSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string().nullable(),\n  color: z.string(),\n  icon: z.string(),\n  isCustom: z.boolean().default(false),\n  createdAt: z.date().default(() => new Date()),\n});\n\nexport const insertParcelSchema = parcelSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBusinessRulesSchema = businessRulesSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDepartmentSchema = departmentSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const ParcelStatus = z.enum([\n  \"pending\",\n  \"processing\",\n  \"completed\",\n  \"insurance_review\",\n  \"error\"\n]);\n\nexport const DepartmentType = z.enum([\n  \"mail\",\n  \"regular\",\n  \"heavy\",\n  \"insurance\",\n  \"custom\"\n]);","size_bytes":1563},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nfunction Router() {\n    return (<Switch>\n      <Route path=\"/\" component={Dashboard}/>\n      <Route path=\"/dashboard\" component={Dashboard}/>\n      <Route component={NotFound}/>\n    </Switch>);\n}\nfunction App() {\n    return (<QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>);\n}\nexport default App;\n","size_bytes":752},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 4%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(210, 40%, 4%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 40%, 4%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --radius: 8px;\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 40%, 4%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(210, 40%, 4%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 40%, 4%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(217, 91%, 60%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(217, 91%, 60%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n.status-pending { @apply bg-yellow-100 text-yellow-800; }\n.status-processing { @apply bg-blue-100 text-blue-800; }\n.status-completed { @apply bg-green-100 text-green-800; }\n.status-insurance { @apply bg-purple-100 text-purple-800; }\n.status-insurance_review { @apply bg-purple-100 text-purple-800; }\n.status-error { @apply bg-red-100 text-red-800; }\n\n.dept-mail { @apply bg-cyan-50 border-cyan-200; }\n.dept-regular { @apply bg-blue-50 border-blue-200; }\n.dept-heavy { @apply bg-orange-50 border-orange-200; }\n.dept-insurance { @apply bg-purple-50 border-purple-200; }\n","size_bytes":3292},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n","size_bytes":155},"server/db/mongodb.js":{"content":"import { MongoClient } from 'mongodb';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst uri = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017';\nconst dbName = 'parcel_processing';\n\nlet client = null;\nlet db = null;\n\nconst options = {\n  connectTimeoutMS: 5000,\n  serverSelectionTimeoutMS: 5000,\n  waitQueueTimeoutMS: 5000,\n  maxPoolSize: 10,\n  minPoolSize: 5,\n  retryWrites: true,\n  retryReads: true\n};\n\nlet isConnecting = false;\nlet connectionPromise = null;\n\nexport async function connectToDatabase() {\n  // If we're already connecting, wait for that connection\n  if (isConnecting && connectionPromise) {\n    return connectionPromise;\n  }\n\n  // If we have an existing client, verify it's still valid\n  if (client) {\n    try {\n      await client.db().command({ ping: 1 });\n      return { client, db: client.db(dbName) };\n    } catch (error) {\n      console.log('Previous connection is not valid, creating new connection...');\n      // Clean up the broken connection\n      try {\n        await client.close(true);\n      } catch (closeError) {\n        console.error('Error closing broken connection:', closeError);\n      }\n      client = null;\n      db = null;\n    }\n  }\n\n  // Start a new connection\n  isConnecting = true;\n  connectionPromise = (async () => {\n    try {\n      console.log('Attempting to connect to MongoDB...');\n      console.log('Connection URI:', uri);\n      console.log('Database Name:', dbName);\n\n      // Create new connection\n      client = new MongoClient(uri, options);\n\n      // Set up event handlers\n      client.on('serverHeartbeatFailed', (event) => {\n        console.error('MongoDB heartbeat failed:', event);\n      });\n\n      client.on('serverHeartbeatSucceeded', () => {\n        console.log('MongoDB heartbeat succeeded');\n      });\n\n      client.on('connectionPoolCleared', () => {\n        console.warn('MongoDB connection pool cleared');\n      });\n\n      await client.connect();\n      console.log('Connected to MongoDB');\n\n      // Test the connection and initialize the database\n      db = client.db(dbName);\n      await db.command({ ping: 1 });\n      console.log('MongoDB connection test successful');\n\n      return { client, db };\n    } catch (error) {\n      console.error('MongoDB connection error:', error);\n      // Clean up on failure\n      if (client) {\n        try {\n          await client.close(true);\n        } catch (closeError) {\n          console.error('Error closing failed connection:', closeError);\n        }\n      }\n      client = null;\n      db = null;\n      throw new Error('Could not connect to MongoDB. Please make sure MongoDB is running.');\n    } finally {\n      isConnecting = false;\n      connectionPromise = null;\n    }\n  })();\n\n  return connectionPromise;\n}\n\nasync function setupCollections(db) {\n  // Set up parcels collection with schema validation\n  await db.createCollection('parcels', {\n    validator: {\n      $jsonSchema: {\n        bsonType: 'object',\n        required: ['parcelId', 'weight', 'value', 'department', 'status', 'requiresInsurance', 'insuranceApproved', 'processingTime', 'errorMessage'],\n        properties: {\n          parcelId: { bsonType: 'string' },\n          weight: { bsonType: 'string' },\n          value: { bsonType: 'string' },\n          department: { bsonType: 'string', enum: ['mail', 'regular', 'heavy', 'insurance'] },\n          status: { bsonType: 'string', enum: ['pending', 'processing', 'completed', 'insurance_review', 'error'] },\n          requiresInsurance: { bsonType: 'bool' },\n          insuranceApproved: { bsonType: 'bool' },\n          processingTime: { bsonType: 'date' },\n          errorMessage: { bsonType: ['string', 'null'] },\n          createdAt: { bsonType: 'date' },\n          updatedAt: { bsonType: 'date' }\n        }\n      }\n    },\n    validationAction: 'error'\n  }).catch(err => {\n    if (err.code !== 48) { // Skip if collection already exists\n      console.error('Error creating parcels collection:', err);\n      throw err;\n    }\n  });\n\n  // Set up indices\n  const collections = {\n    parcels: db.collection('parcels'),\n    businessRules: db.collection('businessRules'),\n    departments: db.collection('departments')\n  };\n\n  await Promise.all([\n    collections.parcels.createIndex({ parcelId: 1 }, { unique: true }),\n    collections.parcels.createIndex({ department: 1 }),\n    collections.parcels.createIndex({ status: 1 }),\n    collections.businessRules.createIndex({ name: 1 }, { unique: true }),\n    collections.businessRules.createIndex({ isActive: 1 }),\n    collections.departments.createIndex({ name: 1 }, { unique: true })\n  ]).catch(console.error);\n}\n\nexport async function getCollection(name) {\n  const { db } = await connectToDatabase();\n  // Initialize collections and indices if needed\n  await setupCollections(db);\n  return db.collection(name);\n}\n\nexport async function closeConnection() {\n  if (client) {\n    try {\n      await client.close(true);\n      console.log('Disconnected from MongoDB');\n    } catch (error) {\n      console.error('Error closing MongoDB connection:', error);\n      throw error;\n    } finally {\n      client = null;\n      db = null;\n    }\n  }\n}\n\n// Handle process shutdown\nprocess.on('SIGINT', async () => {\n  await closeConnection();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  await closeConnection();\n  process.exit(0);\n});","size_bytes":5308},"server/db/setup.js":{"content":"import { connectToDatabase } from './mongodb.js';\n\nexport async function setupIndexes() {\n  const { db } = await connectToDatabase();\n  \n  // Setup indexes for parcels collection\n  await setupParcelIndexes(db);\n  \n  // Setup indexes for departments collection\n  await setupDepartmentIndexes(db);\n  \n  // Setup indexes for business rules collection\n  await setupBusinessRulesIndexes(db);\n}\n\nasync function setupParcelIndexes(db) {\n  const parcels = db.collection('parcels');\n  \n  await Promise.all([\n    // Index for faster lookups by parcelId\n    parcels.createIndex({ parcelId: 1 }, { unique: true }),\n    // Index for status-based queries\n    parcels.createIndex({ status: 1 }),\n    // Index for department-based queries\n    parcels.createIndex({ department: 1 }),\n    // Compound index for department and status queries\n    parcels.createIndex({ department: 1, status: 1 }),\n    // Index for sorting by creation date\n    parcels.createIndex({ createdAt: -1 })\n  ]);\n}\n\nasync function setupDepartmentIndexes(db) {\n  const departments = db.collection('departments');\n  \n  await Promise.all([\n    // Index for faster lookups by name\n    departments.createIndex({ name: 1 }, { unique: true })\n  ]);\n}\n\nasync function setupBusinessRulesIndexes(db) {\n  const businessRules = db.collection('businessRules');\n  \n  await Promise.all([\n    // Index for finding active rules\n    businessRules.createIndex({ isActive: 1 })\n  ]);\n}\n\nexport async function setupValidation() {\n  const { db } = await connectToDatabase();\n  \n  await Promise.all([\n    db.command({\n      collMod: 'parcels',\n      validator: {\n        $jsonSchema: {\n          bsonType: 'object',\n          required: ['parcelId', 'weight', 'department', 'status'],\n          properties: {\n            parcelId: { bsonType: 'string' },\n            weight: { bsonType: 'number', minimum: 0 },\n            department: { bsonType: 'string' },\n            status: {\n              bsonType: 'string',\n              enum: ['pending', 'completed', 'error', 'insurance_review']\n            }\n          }\n        }\n      },\n      validationLevel: 'moderate'\n    }),\n    db.command({\n      collMod: 'departments',\n      validator: {\n        $jsonSchema: {\n          bsonType: 'object',\n          required: ['name', 'isCustom'],\n          properties: {\n            name: { bsonType: 'string' },\n            description: { bsonType: ['string', 'null'] },\n            isCustom: { bsonType: 'bool' }\n          }\n        }\n      }\n    })\n  ]);\n}","size_bytes":2481},"server/services/businessRules.js":{"content":"import { storage } from '../storage.js';\n\nclass BusinessRulesEngine {\n  constructor() {\n    this.defaultRules = {\n      mail: { maxWeight: 1.0 },\n      regular: { maxWeight: 10.0 },\n      insurance: { minValue: 1000.0, enabled: true }\n    };\n  }\n\n  async getCurrentRules() {\n    const businessRules = await storage.getBusinessRules();\n    if (businessRules && businessRules.isActive) {\n      return businessRules.rules;\n    }\n    return this.defaultRules;\n  }\n\n  async updateRules(newRules) {\n    const existingRules = await storage.getBusinessRules();\n    if (existingRules) {\n      await storage.updateBusinessRules(existingRules.id, {\n        name: existingRules.name,\n        rules: newRules,\n        isActive: true\n      });\n    } else {\n      await storage.createBusinessRules({\n        name: \"default\",\n        rules: newRules,\n        isActive: true\n      });\n    }\n  }\n\n  async determineParcelRouting(parcelData) {\n    const rules = await this.getCurrentRules();\n    const { weight, value } = parcelData;\n    let department;\n    let requiresInsurance = false;\n    let status = \"pending\";\n\n    // Determine department based on weight\n    if (weight <= rules.mail.maxWeight) {\n      department = \"mail\";\n    } else if (weight <= rules.regular.maxWeight) {\n      department = \"regular\";\n    } else {\n      department = \"heavy\";\n    }\n\n    // Check if insurance review is required\n    if (rules.insurance.enabled && value > rules.insurance.minValue) {\n      requiresInsurance = true;\n      status = \"insurance_review\";\n    }\n\n    return {\n      department,\n      requiresInsurance,\n      status\n    };\n  }\n\n  async processParcel(parcelData) {\n    try {\n      // Convert weight and value to numbers\n      const weight = typeof parcelData.weight === 'string' ?\n        parseFloat(parcelData.weight) : parcelData.weight;\n      const value = typeof parcelData.value === 'string' ?\n        parseFloat(parcelData.value) : parcelData.value;\n\n      if (isNaN(weight)) {\n        throw new Error(`Invalid weight value for parcel ${parcelData.parcelId}`);\n      }\n      if (isNaN(value)) {\n        throw new Error(`Invalid value amount for parcel ${parcelData.parcelId}`);\n      }\n\n      const routing = await this.determineParcelRouting({\n        ...parcelData,\n        weight,\n        value\n      });\n\n      const insertParcel = {\n        parcelId: parcelData.parcelId,\n        weight: weight.toString(),\n        value: value.toString(),\n        department: routing.department,\n        status: routing.status,\n        requiresInsurance: routing.requiresInsurance,\n        insuranceApproved: false,\n        processingTime: new Date(),\n        errorMessage: null\n      };\n\n      return await storage.createParcel(insertParcel);\n    } catch (error) {\n      // Create parcel with error status\n      const insertParcel = {\n        parcelId: parcelData.parcelId,\n        weight: parcelData.weight.toString(),\n        value: parcelData.value.toString(),\n        department: \"unassigned\",\n        status: \"error\",\n        requiresInsurance: false,\n        insuranceApproved: false,\n        processingTime: new Date(),\n        errorMessage: error instanceof Error ? error.message : 'Unknown error'\n      };\n\n      return await storage.createParcel(insertParcel);\n    }\n  }\n\n  async approveInsurance(parcelId) {\n    const parcel = await storage.getParcelByParcelId(parcelId);\n    if (!parcel) return undefined;\n\n    if (parcel.requiresInsurance) {\n      return await storage.updateParcel(parcel.id, {\n        insuranceApproved: true,\n        status: \"processing\"\n      });\n    }\n    return parcel;\n  }\n\n  async completeProcessing(parcelId) {\n    const parcel = await storage.getParcelByParcelId(parcelId);\n    if (!parcel) return undefined;\n\n    return await storage.updateParcel(parcel.id, {\n      status: \"completed\"\n    });\n  }\n}\n\nexport const businessRulesEngine = new BusinessRulesEngine();\nexport { BusinessRulesEngine };","size_bytes":3913},"server/services/xmlParser.js":{"content":"import xml2js from 'xml2js';\n\nclass XMLParser {\n  constructor() {\n    this.parser = new xml2js.Parser({\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: true,\n      normalize: true,\n      trim: true,\n      strict: false,\n      tagNameProcessors: [\n        (tagName) => tagName.toLowerCase()\n      ]\n    });\n  }\n\n  convertToInsertParcel(parsedParcel) {\n    const weight = Math.max(0, parsedParcel.weight);\n    const value = Math.max(0, parsedParcel.value);\n\n    const weightNum = parseFloat(weight.toFixed(2));\n    const valueNum = parseFloat(value.toFixed(2));\n\n    let department;\n    if (weight <= 1) {\n      department = 'mail';\n    } else if (weight <= 10) {\n      department = 'regular';\n    } else {\n      department = 'heavy';\n    }\n\n    if (value >= 1000) {\n      department = 'insurance';\n    }\n\n    return {\n      parcelId: parsedParcel.parcelId,\n      weight: weightNum,\n      value: valueNum,\n      status: 'pending',\n      department,\n      requiresInsurance: value >= 1000,\n      insuranceApproved: false,\n      processingTime: new Date(),\n      errorMessage: null\n    };\n  }\n\n  async parseXML(xmlContent) {\n    try {\n      const result = await this.parser.parseStringPromise(xmlContent);\n      return this.extractParcels(result);\n    } catch (error) {\n      throw new Error(`XML parsing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  extractParcels(parsedXML) {\n    const result = [];\n\n    if (!parsedXML) {\n      throw new Error(\"XML parsing resulted in null or undefined\");\n    }\n\n    let container = null;\n    const containerKeys = Object.keys(parsedXML);\n    for (const key of containerKeys) {\n      if (key.toLowerCase() === 'container') {\n        container = parsedXML[key];\n        break;\n      }\n    }\n\n    if (!container) {\n      throw new Error(\"Invalid XML format: No Container element found. Available root elements: \" +\n        containerKeys.join(', '));\n    }\n\n    let parcelsContainer = null;\n    for (const key of Object.keys(container)) {\n      if (key.toLowerCase() === 'parcels') {\n        parcelsContainer = container[key];\n        break;\n      }\n    }\n\n    const parcelElements = [];\n    if (parcelsContainer) {\n      for (const key of Object.keys(parcelsContainer)) {\n        if (key.toLowerCase() === 'parcel') {\n          const parcelData = parcelsContainer[key];\n          if (Array.isArray(parcelData)) {\n            parcelElements.push(...parcelData);\n          } else if (parcelData) {\n            parcelElements.push(parcelData);\n          }\n        }\n      }\n    }\n\n    if (!parcelElements || parcelElements.length === 0) {\n      throw new Error(\"No Parcel elements found in Container\");\n    }\n\n    for (const parcelElement of parcelElements) {\n      try {\n        const parcel = this.parseParcelElement(parcelElement);\n        result.push(parcel);\n      } catch (error) {\n        console.warn('Failed to parse parcel element:', error instanceof Error ? error.message : 'Unknown error');\n      }\n    }\n\n    return result;\n  }\n\n  parseParcelElement(element) {\n    const getValue = (obj, keys) => {\n      if (!obj) return undefined;\n      for (const key of keys) {\n        for (const propKey of Object.keys(obj)) {\n          if (propKey.toLowerCase() === key.toLowerCase()) {\n            const value = obj[propKey];\n            if (value !== undefined) return value;\n          }\n        }\n      }\n      return undefined;\n    };\n\n    const parcelId = getValue(element, ['ID', 'ParcelID', 'parcelId']) ||\n      `PCL-${new Date().getTime()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const recipientObj = getValue(element, ['Recipient', 'Receipient']);\n    const recipientName = recipientObj ? (getValue(recipientObj, ['Name', 'n']) || '') : '';\n\n    const address = recipientObj ? getValue(recipientObj, ['Address']) : null;\n    const destination = address\n      ? `${getValue(address, ['Street'])} ${getValue(address, ['HouseNumber'])}, ${getValue(address, ['PostalCode'])} ${getValue(address, ['City'])}`.trim()\n      : getValue(element, ['Destination']) || '';\n\n    const weight = getValue(element, ['Weight']);\n    const value = getValue(element, ['Value']);\n\n    let parsedWeight = this.parseNumber(weight);\n    let parsedValue = this.parseNumber(value);\n\n    if (isNaN(parsedWeight) || parsedWeight <= 0) {\n      parsedWeight = 1.0;\n    }\n    if (isNaN(parsedValue)) {\n      parsedValue = 0;\n    }\n\n    return {\n      parcelId: String(parcelId),\n      weight: parsedWeight,\n      value: parsedValue,\n      recipient: recipientName,\n      destination\n    };\n  }\n\n  parseNumber(value) {\n    if (typeof value === 'number') return value;\n    if (typeof value === 'string') {\n      const parsed = parseFloat(value.replace(/[^\\d.-]/g, ''));\n      return isNaN(parsed) ? 0 : parsed;\n    }\n    return 0;\n  }\n\n  getFirstValue(value) {\n    if (Array.isArray(value)) {\n      return value[0]?.toString();\n    }\n    return value?.toString();\n  }\n}\n\nexport const xmlParser = new XMLParser();\nexport { XMLParser };\n","size_bytes":5014},"server/storage/MongoStorage.js":{"content":"import { getCollection } from \"../db/mongodb.js\";\nimport { randomUUID } from \"crypto\";\n\nexport class MongoStorage {\n  async getParcel(id) {\n    const collection = await getCollection(\"parcels\");\n    const parcel = await collection.findOne({ id });\n    return parcel ? { ...parcel } : undefined;\n  }\n\n  async getParcelByParcelId(parcelId) {\n    const collection = await getCollection(\"parcels\");\n    const parcel = await collection.findOne({ parcelId });\n    return parcel ? { ...parcel } : undefined;\n  }\n\n  async createParcel(insertParcel) {\n    const collection = await getCollection(\"parcels\");\n    const now = new Date();\n    const parcel = {\n      id: randomUUID(),\n      parcelId: insertParcel.parcelId,\n      weight: Number(insertParcel.weight),\n      value: Number(insertParcel.value),\n      department: [\"mail\", \"regular\", \"heavy\", \"insurance\"].includes(insertParcel.department)\n        ? insertParcel.department\n        : \"mail\",\n      status: [\"pending\", \"processing\", \"completed\", \"insurance_review\", \"error\"].includes(\n        insertParcel.status\n      )\n        ? insertParcel.status\n        : \"pending\",\n      requiresInsurance: Boolean(insertParcel.requiresInsurance),\n      insuranceApproved: Boolean(insertParcel.insuranceApproved),\n      processingTime: insertParcel.processingTime instanceof Date ? insertParcel.processingTime : now,\n      errorMessage: insertParcel.errorMessage || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    try {\n      await collection.insertOne(parcel);\n      return parcel;\n    } catch (error) {\n      console.error(\"Failed to insert parcel:\", error);\n      if (error instanceof Error) {\n        throw new Error(`MongoDB validation error: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  async updateParcel(id, updates) {\n    const collection = await getCollection(\"parcels\");\n    const result = await collection.findOneAndUpdate(\n      { id },\n      { $set: { ...updates, updatedAt: new Date() } },\n      { returnDocument: \"after\" }\n    );\n    return result || undefined;\n  }\n\n  async getAllParcels() {\n    const collection = await getCollection(\"parcels\");\n    return collection.find().sort({ createdAt: -1 }).toArray();\n  }\n\n  async getParcelsByDepartment(department) {\n    const collection = await getCollection(\"parcels\");\n    return collection.find({ department }).toArray();\n  }\n\n  async getParcelsByStatus(status) {\n    const collection = await getCollection(\"parcels\");\n    return collection.find({ status }).toArray();\n  }\n\n  async getBusinessRules() {\n    const collection = await getCollection(\"businessRules\");\n    const rules = await collection.findOne({ isActive: true });\n    return rules ? { ...rules } : undefined;\n  }\n\n  async createBusinessRules(insertRules) {\n    const collection = await getCollection(\"businessRules\");\n    const now = new Date();\n    const rules = {\n      ...insertRules,\n      isActive: insertRules.isActive ?? true,\n      id: randomUUID(),\n      createdAt: now,\n      updatedAt: now,\n      rules: insertRules.rules,\n    };\n    await collection.insertOne(rules);\n    return rules;\n  }\n\n  async updateBusinessRules(id, insertRules) {\n    const collection = await getCollection(\"businessRules\");\n    const result = await collection.findOneAndUpdate(\n      { id },\n      { $set: { ...insertRules, updatedAt: new Date() } },\n      { returnDocument: \"after\" }\n    );\n    return result || undefined;\n  }\n\n  async getDepartment(id) {\n    const collection = await getCollection(\"departments\");\n    const department = await collection.findOne({ id });\n    return department ? { ...department } : undefined;\n  }\n\n  async getDepartmentByName(name) {\n    const collection = await getCollection(\"departments\");\n    const department = await collection.findOne({ name });\n    return department ? { ...department } : undefined;\n  }\n\n  async createDepartment(insertDepartment) {\n    const collection = await getCollection(\"departments\");\n    const department = {\n      ...insertDepartment,\n      description: insertDepartment.description ?? null,\n      isCustom: insertDepartment.isCustom ?? false,\n      id: randomUUID(),\n      createdAt: new Date(),\n    };\n    await collection.insertOne(department);\n    return department;\n  }\n\n  async getAllDepartments() {\n    const collection = await getCollection(\"departments\");\n    const departments = await collection.find().toArray();\n    return departments.map((d) => ({ ...d }));\n  }\n\n  async deleteDepartment(id) {\n    const collection = await getCollection(\"departments\");\n    const result = await collection.deleteOne({ id });\n    return result.deletedCount > 0;\n  }\n\n  async clearAllParcels() {\n    const collection = await getCollection(\"parcels\");\n    await collection.deleteMany({});\n  }\n\n  async resetToDefaults() {\n    const [parcelsCollection, businessRulesCollection, departmentsCollection] = await Promise.all([\n      getCollection(\"parcels\"),\n      getCollection(\"businessRules\"),\n      getCollection(\"departments\"),\n    ]);\n\n    await Promise.all([\n      parcelsCollection.deleteMany({}),\n      businessRulesCollection.deleteMany({}),\n      departmentsCollection.deleteMany({}),\n    ]);\n\n    await Promise.all([\n      parcelsCollection.createIndex({ id: 1 }, { unique: true }),\n      parcelsCollection.createIndex({ parcelId: 1 }, { unique: true }),\n      businessRulesCollection.createIndex({ id: 1 }, { unique: true }),\n      businessRulesCollection.createIndex({ name: 1 }, { unique: true }),\n      departmentsCollection.createIndex({ id: 1 }, { unique: true }),\n      departmentsCollection.createIndex({ name: 1 }, { unique: true }),\n    ]);\n\n    const defaultDepartments = [\n      { name: \"mail\", description: \"Packages weighing up to 1kg\", color: \"cyan\", icon: \"envelope\", isCustom: false },\n      { name: \"regular\", description: \"Packages weighing 1-10kg\", color: \"blue\", icon: \"box\", isCustom: false },\n      { name: \"heavy\", description: \"Packages weighing over 10kg\", color: \"orange\", icon: \"weight-hanging\", isCustom: false },\n      { name: \"insurance\", description: \"High-value packages requiring approval\", color: \"purple\", icon: \"shield-alt\", isCustom: false },\n    ];\n\n    const defaultRules = {\n      name: \"default\",\n      rules: {\n        mail: { maxWeight: 1.0 },\n        regular: { maxWeight: 10.0 },\n        insurance: { minValue: 1000.0, enabled: true },\n      },\n      isActive: true,\n    };\n\n    await Promise.all([\n      ...defaultDepartments.map((dept) => this.createDepartment(dept)),\n      this.createBusinessRules(defaultRules),\n    ]);\n  }\n}\n","size_bytes":6526},"client/src/components/ConfigurationModal.jsx":{"content":"var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nexport default function ConfigurationModal(_a) {\n    var _this = this;\n    var isOpen = _a.isOpen, onClose = _a.onClose;\n    var queryClient = useQueryClient();\n    var toast = useToast().toast;\n    var businessRules = useQuery({\n        queryKey: [\"/api/business-rules\"],\n        enabled: isOpen,\n    }).data;\n    var _b = useState({\n        mail: { maxWeight: 1.0 },\n        regular: { maxWeight: 10.0 },\n        heavy: { minWeight: 10.0 },\n        insurance: { minValue: 1000.0, enabled: true }\n    }), rules = _b[0], setRules = _b[1];\n    // Sync rules with fetched data when modal opens\n    useEffect(function () {\n        var _a, _b, _c, _d;\n        if (businessRules && isOpen) {\n            setRules({\n                mail: (_a = businessRules.mail) !== null && _a !== void 0 ? _a : { maxWeight: 1.0 },\n                regular: (_b = businessRules.regular) !== null && _b !== void 0 ? _b : { maxWeight: 10.0 },\n                heavy: (_c = businessRules.heavy) !== null && _c !== void 0 ? _c : { minWeight: 10.0 },\n                insurance: (_d = businessRules.insurance) !== null && _d !== void 0 ? _d : { minValue: 1000.0, enabled: true },\n            });\n        }\n    }, [businessRules, isOpen]);\n    var updateRulesMutation = useMutation({\n        mutationFn: function (newRules) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, apiRequest(\"PUT\", \"/api/business-rules\", newRules)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        }); },\n        onSuccess: function () {\n            queryClient.invalidateQueries({ queryKey: [\"/api/business-rules\"] });\n            queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n            toast({ title: \"Success\", description: \"Business rules updated successfully\" });\n            onClose();\n        },\n        onError: function (error) {\n            toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n        }\n    });\n    var handleSave = function () {\n        // Validate that mail < regular < heavy\n        if (rules.mail.maxWeight >= rules.regular.maxWeight) {\n            toast({\n                title: \"Validation Error\",\n                description: \"Mail weight must be less than Regular weight\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        if (rules.regular.maxWeight > rules.heavy.minWeight) {\n            toast({\n                title: \"Validation Error\",\n                description: \"Regular weight must be less than Heavy weight\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        updateRulesMutation.mutate(rules);\n    };\n    var handleReset = function () { return setRules({\n        mail: { maxWeight: 1.0 },\n        regular: { maxWeight: 10.0 },\n        heavy: { minWeight: 10.0 },\n        insurance: { minValue: 1000.0, enabled: true }\n    }); };\n    var updateMailWeight = function (value) {\n        var numValue = parseFloat(value);\n        if (!isNaN(numValue) && numValue > 0)\n            setRules(function (prev) { return (__assign(__assign({}, prev), { mail: { maxWeight: numValue } })); });\n    };\n    var updateRegularWeight = function (value) {\n        var numValue = parseFloat(value);\n        if (!isNaN(numValue) && numValue > 0)\n            setRules(function (prev) { return (__assign(__assign({}, prev), { regular: { maxWeight: numValue } })); });\n    };\n    var updateHeavyWeight = function (value) {\n        var numValue = parseFloat(value);\n        if (!isNaN(numValue) && numValue > 0) {\n            setRules(function (prev) { return (__assign(__assign({}, prev), { heavy: { minWeight: numValue } })); });\n        }\n    };\n    var updateInsuranceValue = function (value) {\n        var numValue = parseFloat(value);\n        if (!isNaN(numValue) && numValue >= 0)\n            setRules(function (prev) { return (__assign(__assign({}, prev), { insurance: __assign(__assign({}, prev.insurance), { minValue: numValue }) })); });\n    };\n    var toggleInsuranceEnabled = function (enabled) { return setRules(function (prev) { return (__assign(__assign({}, prev), { insurance: __assign(__assign({}, prev.insurance), { enabled: enabled }) })); }); };\n    return (<Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-configuration\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <DialogTitle>Business Rules Configuration</DialogTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">Configure department routing rules and value thresholds</p>\n            </div>\n            \n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Weight-based Rules */}\n          <div>\n            <h4 className=\"text-md font-medium text-foreground mb-4\">Weight-based Department Routing</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {/* Mail */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-foreground\">Mail Department</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">≤</span>\n                  <Input type=\"number\" value={rules.mail.maxWeight} step=\"0.1\" min=\"0.1\" onChange={function (e) { return updateMailWeight(e.target.value); }} className=\"flex-1\" data-testid=\"input-mail-weight\"/>\n                  <span className=\"text-sm text-muted-foreground\">kg</span>\n                </div>\n              </div>\n\n              {/* Regular */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-foreground\">Regular Department</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">≤</span>\n                  <Input type=\"number\" value={rules.regular.maxWeight} step=\"0.1\" min=\"0.1\" onChange={function (e) { return updateRegularWeight(e.target.value); }} className=\"flex-1\" data-testid=\"input-regular-weight\"/>\n                  <span className=\"text-sm text-muted-foreground\">kg</span>\n                </div>\n              </div>\n\n              {/* Heavy */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-foreground\">Heavy Department</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">{'>'}</span>\n                  <Input type=\"number\" value={rules.heavy.minWeight} step=\"0.1\" min=\"0.1\" onChange={function (e) { return updateHeavyWeight(e.target.value); }} className=\"flex-1\" data-testid=\"input-heavy-weight\"/>\n                  <span className=\"text-sm text-muted-foreground\">kg</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Insurance */}\n          <div>\n            <h4 className=\"text-md font-medium text-foreground mb-4\">Value-based Insurance Requirements</h4>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-1\">\n                <Label className=\"text-sm font-medium text-foreground\">Insurance Review Threshold</Label>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <span className=\"text-sm text-muted-foreground\">{'>'}</span>\n                  <span className=\"text-sm text-muted-foreground\">€</span>\n                  <Input type=\"number\" value={rules.insurance.minValue} step=\"100\" min=\"0\" onChange={function (e) { return updateInsuranceValue(e.target.value); }} className=\"flex-1\" data-testid=\"input-insurance-threshold\"/>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"enableInsurance\" checked={rules.insurance.enabled} onCheckedChange={toggleInsuranceEnabled} data-testid=\"checkbox-enable-insurance\"/>\n                <Label htmlFor=\"enableInsurance\" className=\"text-sm text-foreground\">Enable insurance review</Label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <div className=\"flex items-center justify-end space-x-3\">\n            <Button variant=\"outline\" onClick={handleReset} data-testid=\"button-reset-defaults\">Reset to Defaults</Button>\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">Cancel</Button>\n            <Button onClick={handleSave} disabled={updateRulesMutation.isPending} data-testid=\"button-save-changes\">\n              {updateRulesMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>);\n}\n","size_bytes":12586},"client/src/components/DepartmentOverview.jsx":{"content":"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Mail, Package, Weight, Shield } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nexport default function DepartmentOverview(_a) {\n    var _this = this;\n    var metrics = _a.metrics, isLoading = _a.isLoading;\n    // Fetch business rules to display dynamic descriptions\n    var _b = useQuery({\n        queryKey: [\"/api/business-rules\"],\n        queryFn: function () { return __awaiter(_this, void 0, void 0, function () {\n            var response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, apiRequest(\"GET\", \"/api/business-rules\")];\n                    case 1:\n                        response = _a.sent();\n                        return [4 /*yield*/, response.json()];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        }); },\n    }), businessRules = _b.data, isLoadingRules = _b.isLoading;\n    if (isLoading || isLoadingRules) {\n        return (<Card>\n        <CardHeader>\n          <CardTitle>Department Status Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {__spreadArray([], Array(4), true).map(function (_, i) { return (<Skeleton key={i} className=\"h-24 w-full\"/>); })}\n          </div>\n        </CardContent>\n      </Card>);\n    }\n    var defaultRules = {\n        mail: { maxWeight: 1.0 },\n        regular: { maxWeight: 10.0 },\n        heavy: { minWeight: 10.0 },\n        insurance: { minValue: 1000.0, enabled: true }\n    };\n    var rules = businessRules !== null && businessRules !== void 0 ? businessRules : defaultRules;\n    var departments = [\n        {\n            name: \"Mail Department\",\n            key: \"mail\",\n            icon: Mail,\n            iconColor: \"text-cyan-600\",\n            getDescription: function (rules) { var _a, _b; return \"Weight: \\u2264 \".concat((_b = (_a = rules === null || rules === void 0 ? void 0 : rules.mail) === null || _a === void 0 ? void 0 : _a.maxWeight) !== null && _b !== void 0 ? _b : 1.0, \"kg\"); }\n        },\n        {\n            name: \"Regular Department\",\n            key: \"regular\",\n            icon: Package,\n            iconColor: \"text-blue-600\",\n            getDescription: function (rules) {\n                var _a, _b, _c, _d;\n                var mailMax = (_b = (_a = rules === null || rules === void 0 ? void 0 : rules.mail) === null || _a === void 0 ? void 0 : _a.maxWeight) !== null && _b !== void 0 ? _b : 1.0;\n                var regularMax = (_d = (_c = rules === null || rules === void 0 ? void 0 : rules.regular) === null || _c === void 0 ? void 0 : _c.maxWeight) !== null && _d !== void 0 ? _d : 10.0;\n                return \"Weight: \".concat(mailMax < regularMax ? \"\".concat(mailMax, \"-\") : '').concat(regularMax, \"kg\");\n            }\n        },\n        {\n            name: \"Heavy Department\",\n            key: \"heavy\",\n            icon: Weight,\n            iconColor: \"text-orange-600\",\n            getDescription: function (rules) { var _a, _b; return \"Weight: > \".concat((_b = (_a = rules === null || rules === void 0 ? void 0 : rules.heavy) === null || _a === void 0 ? void 0 : _a.minWeight) !== null && _b !== void 0 ? _b : 10.0, \"kg\"); }\n        },\n        {\n            name: \"Insurance Review\",\n            key: \"insurance\",\n            icon: Shield,\n            iconColor: \"text-purple-600\",\n            getDescription: function (rules) { var _a, _b; return \"Value: > \\u20AC\".concat(((_b = (_a = rules === null || rules === void 0 ? void 0 : rules.insurance) === null || _a === void 0 ? void 0 : _a.minValue) !== null && _b !== void 0 ? _b : 1000.0).toLocaleString()); }\n        }\n    ];\n    var getDepartmentData = function (key) {\n        var _a, _b;\n        var defaultData = key === \"insurance\"\n            ? { count: 0, approved: 0, reviewing: 0 }\n            : { count: 0, processed: 0, pending: 0 };\n        return (_b = (_a = metrics === null || metrics === void 0 ? void 0 : metrics.departments) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : defaultData;\n    };\n    return (<Card data-testid=\"card-department-overview\">\n      <CardHeader>\n        <CardTitle>Department Status Overview</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {departments.map(function (dept) {\n            var _a, _b, _c, _d, _e, _f;\n            var Icon = dept.icon;\n            var isInsurance = dept.key === \"insurance\";\n            var data = getDepartmentData(dept.key);\n            var description = dept.getDescription(rules);\n            return (<div key={dept.key} className=\"rounded-lg p-4 border bg-card hover:shadow-md transition-shadow\" data-testid={\"card-department-\".concat(dept.key)}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-foreground\">{dept.name}</h4>\n                  <Icon className={dept.iconColor} size={20} aria-hidden=\"true\"/>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-1\">{description}</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid={\"text-\".concat(dept.key, \"-count\")} aria-label={\"\".concat(dept.name, \" total count\")}>\n                  {(_b = (_a = data.count) === null || _a === void 0 ? void 0 : _a.toLocaleString()) !== null && _b !== void 0 ? _b : \"0\"}\n                </p>\n                <div className=\"mt-2 text-xs text-muted-foreground\">\n                  {isInsurance ? (<>\n                      <span className=\"text-green-600\" data-testid={\"text-\".concat(dept.key, \"-approved\")}>\n                        {(_c = data.approved) !== null && _c !== void 0 ? _c : 0} approved\n                      </span>\n                      {\" • \"}\n                      <span className=\"text-purple-600\" data-testid={\"text-\".concat(dept.key, \"-reviewing\")}>\n                        {(_d = data.reviewing) !== null && _d !== void 0 ? _d : 0} reviewing\n                      </span>\n                    </>) : (<>\n                      <span className=\"text-green-600\" data-testid={\"text-\".concat(dept.key, \"-processed\")}>\n                        {(_e = data.processed) !== null && _e !== void 0 ? _e : 0} processed\n                      </span>\n                      {\" • \"}\n                      <span className=\"text-yellow-600\" data-testid={\"text-\".concat(dept.key, \"-pending\")}>\n                        {(_f = data.pending) !== null && _f !== void 0 ? _f : 0} pending\n                      </span>\n                    </>)}\n                </div>\n              </div>);\n        })}\n        </div>\n      </CardContent>\n    </Card>);\n}\n","size_bytes":9957},"client/src/components/Layout.jsx":{"content":"import Sidebar from \"./Sidebar\";\nexport default function Layout(_a) {\n    var children = _a.children;\n    return (<div className=\"min-h-screen flex\">\n      <Sidebar />\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {children}\n      </main>\n    </div>);\n}\n","size_bytes":278},"client/src/components/MetricsCards.jsx":{"content":"var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Package, CheckCircle, Shield, AlertTriangle } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nexport default function MetricsCards(_a) {\n    var _b, _c, _d, _e, _f, _g, _h, _j;\n    var metrics = _a.metrics, isLoading = _a.isLoading;\n    if (isLoading) {\n        return (<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {__spreadArray([], Array(4), true).map(function (_, i) { return (<Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-16 w-full\"/>\n            </CardContent>\n          </Card>); })}\n      </div>);\n    }\n    var completionRate = (metrics === null || metrics === void 0 ? void 0 : metrics.totalParcels) > 0\n        ? ((metrics.processed / metrics.totalParcels) * 100).toFixed(1)\n        : \"0.0\";\n    return (<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <Card data-testid=\"card-total-parcels\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Total Parcels</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-parcels\">\n                {(_c = (_b = metrics === null || metrics === void 0 ? void 0 : metrics.totalParcels) === null || _b === void 0 ? void 0 : _b.toLocaleString()) !== null && _c !== void 0 ? _c : \"0\"}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <Package className=\"text-blue-600 text-xl\"/>\n            </div>\n          </div>\n          <p className=\"text-xs text-green-600 mt-2\">\n            <span className=\"inline-block w-0 h-0 border-l-2 border-l-transparent border-r-2 border-r-transparent border-b-2 border-b-green-600 mr-1 mb-0.5\"></span>\n            {(metrics === null || metrics === void 0 ? void 0 : metrics.totalParcels) > 0 ? \"\".concat(completionRate, \"% completed\") : \"No parcels yet\"}\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-processed\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Processed</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-processed\">\n                {(_e = (_d = metrics === null || metrics === void 0 ? void 0 : metrics.processed) === null || _d === void 0 ? void 0 : _d.toLocaleString()) !== null && _e !== void 0 ? _e : \"0\"}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"text-green-600 text-xl\"/>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {completionRate}% completion rate\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-pending-insurance\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Pending Insurance</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-pending-insurance\">\n                {(_g = (_f = metrics === null || metrics === void 0 ? void 0 : metrics.pendingInsurance) === null || _f === void 0 ? void 0 : _f.toLocaleString()) !== null && _g !== void 0 ? _g : \"0\"}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <Shield className=\"text-purple-600 text-xl\"/>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {(metrics === null || metrics === void 0 ? void 0 : metrics.pendingInsurance) > 0 ? \"\".concat(((metrics.pendingInsurance / metrics.totalParcels) * 100).toFixed(1), \"% of total\") : \"All insured\"}\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-errors\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Processing Errors</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-errors\">\n                {(_j = (_h = metrics === null || metrics === void 0 ? void 0 : metrics.errors) === null || _h === void 0 ? void 0 : _h.toLocaleString()) !== null && _j !== void 0 ? _j : \"0\"}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <AlertTriangle className=\"text-red-600 text-xl\"/>\n            </div>\n          </div>\n          <p className=\"text-xs text-red-600 mt-2\">\n            <span className=\"inline-block w-0 h-0 border-l-2 border-l-transparent border-r-2 border-r-transparent border-t-2 border-t-red-600 mr-1 mt-0.5\"></span>\n            {(metrics === null || metrics === void 0 ? void 0 : metrics.errors) > 0 ? \"\".concat(((metrics.errors / metrics.totalParcels) * 100).toFixed(1), \"% error rate\") : \"No errors\"}\n          </p>\n        </CardContent>\n      </Card>\n    </div>);\n}\n","size_bytes":5822},"client/src/components/ParcelTable.jsx":{"content":"var __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nvar __generator =\n  (this && this.__generator) ||\n  function (thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: [],\n      },\n      f,\n      y,\n      t,\n      g = Object.create(\n        (typeof Iterator === \"function\" ? Iterator : Object).prototype\n      );\n    return (\n      (g.next = verb(0)),\n      (g[\"throw\"] = verb(1)),\n      (g[\"return\"] = verb(2)),\n      typeof Symbol === \"function\" &&\n        (g[Symbol.iterator] = function () {\n          return this;\n        }),\n      g\n    );\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while ((g && ((g = 0), op[0] && (_ = 0)), _))\n        try {\n          if (\n            ((f = 1),\n            y &&\n              (t =\n                op[0] & 2\n                  ? y[\"return\"]\n                  : op[0]\n                  ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0)\n                  : y.next) &&\n              !(t = t.call(y, op[1])).done)\n          )\n            return t;\n          if (((y = 0), t)) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n            case 4:\n              _.label++;\n              return { value: op[1], done: false };\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n            case 7:\n              op = _.ops.pop();\n              _.trys.pop();\n              continue;\n            default:\n              if (\n                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&\n                (op[0] === 6 || op[0] === 2)\n              ) {\n                _ = 0;\n                continue;\n              }\n              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                _.label = op[1];\n                break;\n              }\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n                _.ops.push(op);\n                break;\n              }\n              if (t[2]) _.ops.pop();\n              _.trys.pop();\n              continue;\n          }\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n      if (op[0] & 5) throw op[1];\n      return { value: op[0] ? op[1] : void 0, done: true };\n    }\n  };\nvar __spreadArray =\n  (this && this.__spreadArray) ||\n  function (to, from, pack) {\n    if (pack || arguments.length === 2)\n      for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n        }\n      }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  };\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Eye,\n  Check,\n  Truck,\n  Wrench,\n  Search,\n  Mail,\n  Package,\n  Weight,\n  Shield,\n  HelpCircle,\n  Clock,\n  Loader2,\n  CheckCircle,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nexport default function ParcelTable() {\n  var _this = this;\n  var _a = useState(\"\"),\n    statusFilter = _a[0],\n    setStatusFilter = _a[1];\n  var _b = useState(\"\"),\n    departmentFilter = _b[0],\n    setDepartmentFilter = _b[1];\n  var _c = useState(\"\"),\n    searchQuery = _c[0],\n    setSearchQuery = _c[1];\n  var _d = useState(1),\n    currentPage = _d[0],\n    setCurrentPage = _d[1];\n  var pageSize = 20;\n  var queryClient = useQueryClient();\n  var toast = useToast().toast;\n  var _e = useQuery({\n      queryKey: [\n        \"/api/parcels\",\n        {\n          status: statusFilter !== \"all\" ? statusFilter : undefined,\n          department: departmentFilter !== \"all\" ? departmentFilter : undefined,\n          search: searchQuery || undefined,\n          page: currentPage,\n          limit: pageSize,\n        },\n      ],\n    }),\n    _f = _e.data,\n    parcels = _f === void 0 ? [] : _f,\n    isLoading = _e.isLoading;\n  // Reset page to 1 on filter/search change\n  useEffect(\n    function () {\n      setCurrentPage(1);\n    },\n    [statusFilter, departmentFilter, searchQuery]\n  );\n  var approveInsuranceMutation = useMutation({\n    mutationFn: function (parcelId) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [\n            2 /*return*/,\n            apiRequest(\n              \"POST\",\n              \"/api/parcels/\".concat(parcelId, \"/approve-insurance\")\n            ),\n          ];\n        });\n      });\n    },\n    onSuccess: function () {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parcels\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Insurance approved successfully\",\n      });\n    },\n    onError: function (error) {\n      return toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  var completeProcessingMutation = useMutation({\n    mutationFn: function (parcelId) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [\n            2 /*return*/,\n            apiRequest(\"POST\", \"/api/parcels/\".concat(parcelId, \"/complete\")),\n          ];\n        });\n      });\n    },\n    onSuccess: function () {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parcels\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({ title: \"Success\", description: \"Parcel processing completed\" });\n    },\n    onError: function (error) {\n      return toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n  var getStatusBadge = function (status) {\n    var statusConfig = {\n      pending: { className: \"status-pending\", icon: Clock, label: \"Pending\" },\n      processing: {\n        className: \"status-processing\",\n        icon: Loader2,\n        label: \"Processing\",\n      },\n      completed: {\n        className: \"status-completed\",\n        icon: CheckCircle,\n        label: \"Completed\",\n      },\n      insurance_review: {\n        className: \"status-insurance\",\n        icon: Shield,\n        label: \"Insurance Review\",\n      },\n      error: { className: \"status-error\", icon: AlertTriangle, label: \"Error\" },\n    };\n    var config = statusConfig[status] || statusConfig.error;\n    var Icon = config.icon;\n    return (\n      <Badge className={\"inline-flex items-center \".concat(config.className)}>\n        <Icon className=\"w-3 h-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n  var getDepartmentBadge = function (department) {\n    var deptConfig = {\n      mail: {\n        className: \"bg-cyan-100 text-cyan-800\",\n        icon: Mail,\n        label: \"Mail\",\n      },\n      regular: {\n        className: \"bg-blue-100 text-blue-800\",\n        icon: Package,\n        label: \"Regular\",\n      },\n      heavy: {\n        className: \"bg-orange-100 text-orange-800\",\n        icon: Weight,\n        label: \"Heavy\",\n      },\n      insurance: {\n        className: \"bg-purple-100 text-purple-800\",\n        icon: Shield,\n        label: \"Insurance\",\n      },\n      unassigned: {\n        className: \"bg-gray-100 text-gray-800\",\n        icon: HelpCircle,\n        label: \"Unassigned\",\n      },\n    };\n    var config = deptConfig[department] || deptConfig.unassigned;\n    var Icon = config.icon;\n    return (\n      <Badge className={\"inline-flex items-center \".concat(config.className)}>\n        <Icon className=\"w-3 h-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n  var formatValue = function (value) {\n    var numValue = typeof value === \"string\" ? parseFloat(value) : value;\n    return isNaN(numValue) ? \"€0.00\" : \"\\u20AC\".concat(numValue.toFixed(2));\n  };\n  var formatWeight = function (weight) {\n    var numWeight = typeof weight === \"string\" ? parseFloat(weight) : weight;\n    return isNaN(numWeight) ? \"ERROR\" : \"\".concat(numWeight.toFixed(1), \" kg\");\n  };\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Parcels</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {__spreadArray([], Array(5), true).map(function (_, i) {\n              return <Skeleton key={i} className=\"h-16 w-full\" />;\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  return (\n    <Card data-testid=\"card-parcel-table\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Parcels</CardTitle>\n          <div className=\"flex items-center space-x-3\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger\n                className=\"w-40\"\n                data-testid=\"select-status-filter\"\n              >\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"processing\">Processing</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"insurance_review\">\n                  Insurance Review\n                </SelectItem>\n                <SelectItem value=\"error\">Error</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={departmentFilter}\n              onValueChange={setDepartmentFilter}\n            >\n              <SelectTrigger\n                className=\"w-40\"\n                data-testid=\"select-department-filter\"\n              >\n                <SelectValue placeholder=\"All Departments\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Departments</SelectItem>\n                <SelectItem value=\"mail\">Mail</SelectItem>\n                <SelectItem value=\"regular\">Regular</SelectItem>\n                <SelectItem value=\"heavy\">Heavy</SelectItem>\n                <SelectItem value=\"insurance\">Insurance</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search parcels...\"\n                className=\"pl-10 w-64\"\n                value={searchQuery}\n                onChange={function (e) {\n                  return setSearchQuery(e.target.value);\n                }}\n                data-testid=\"input-search-parcels\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Parcel ID</TableHead>\n                <TableHead>Weight</TableHead>\n                <TableHead>Value</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Processing Time</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {parcels.length === 0 ? (\n                <TableRow>\n                  <TableCell\n                    colSpan={7}\n                    className=\"text-center py-8 text-muted-foreground\"\n                  >\n                    No parcels found. Upload an XML file to get started.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                parcels.map(function (parcel) {\n                  return (\n                    <TableRow\n                      key={parcel.id}\n                      className=\"hover:bg-muted/50 transition-colors\"\n                      data-testid={\"row-parcel-\".concat(parcel.id)}\n                    >\n                      <TableCell>\n                        <div className=\"font-mono text-sm text-foreground\">\n                          {parcel.parcelId}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-foreground\">\n                          {formatWeight(parcel.weight)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-foreground\">\n                          {formatValue(parcel.value)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getDepartmentBadge(parcel.department)}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(parcel.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {new Date(parcel.processingTime).toLocaleTimeString(\n                            \"en-US\",\n                            { timeZone: \"UTC\", hour12: false }\n                          )}{\" \"}\n                          UTC\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          {parcel.status === \"insurance_review\" && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={function () {\n                                return approveInsuranceMutation.mutate(\n                                  parcel.parcelId\n                                );\n                              }}\n                              disabled={approveInsuranceMutation.isPending}\n                              className=\"text-purple-600 hover:text-purple-500\"\n                            >\n                              <Shield className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          {parcel.status === \"processing\" && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={function () {\n                                return completeProcessingMutation.mutate(\n                                  parcel.parcelId\n                                );\n                              }}\n                              disabled={completeProcessingMutation.isPending}\n                              className=\"text-green-600 hover:text-green-500\"\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          {parcel.status === \"completed\" && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-green-600 hover:text-green-500\"\n                            >\n                              <Truck className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          {parcel.status === \"error\" && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-red-600 hover:text-red-500\"\n                            >\n                              <Wrench className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {parcels.length > 0 && (\n          <div className=\"px-6 py-3 border-t border-border flex items-center justify-between\">\n            <div\n              className=\"text-sm text-muted-foreground\"\n              data-testid=\"text-pagination-info\"\n            >\n              Showing{\" \"}\n              <span className=\"font-medium\">\n                {(currentPage - 1) * pageSize + 1}\n              </span>{\" \"}\n              to{\" \"}\n              <span className=\"font-medium\">\n                {Math.min(currentPage * pageSize, parcels.length)}\n              </span>{\" \"}\n              of <span className=\"font-medium\">{parcels.length}</span> results\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={currentPage === 1}\n                onClick={function () {\n                  return setCurrentPage(function (prev) {\n                    return Math.max(prev - 1, 1);\n                  });\n                }}\n                data-testid=\"button-previous\"\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                data-testid={\"button-page-\".concat(currentPage)}\n              >\n                {currentPage}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={parcels.length < pageSize}\n                onClick={function () {\n                  return setCurrentPage(function (prev) {\n                    return prev + 1;\n                  });\n                }}\n                data-testid=\"button-next\"\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":19906},"client/src/components/Sidebar.jsx":{"content":"import { Truck, BarChart3, Building2, Package, Settings, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nexport default function Sidebar() {\n    var location = useLocation()[0];\n    var navigation = [\n        { name: \"Dashboard\", href: \"/\", icon: BarChart3, current: location === \"/\" },\n        { name: \"Parcels\", href: \"/parcels\", icon: Package, current: location === \"/parcels\" },\n        { name: \"Departments\", href: \"/departments\", icon: Building2, current: location === \"/departments\" },\n        { name: \"Analytics\", href: \"/analytics\", icon: BarChart3, current: location === \"/analytics\" },\n        { name: \"Settings\", href: \"/settings\", icon: Settings, current: location === \"/settings\" },\n    ];\n    return (<aside className=\"w-64 bg-card border-r border-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Truck className=\"text-primary-foreground text-lg\"/>\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-name\">ParcelFlow</h1>\n            <p className=\"text-sm text-muted-foreground\">Distribution Center</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map(function (item) {\n            var Icon = item.icon;\n            return (<li key={item.name}>\n                <Link href={item.href} className={\"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors \".concat(item.current\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\")} data-testid={\"link-\".concat(item.name.toLowerCase())}>\n                <Icon className=\"w-5 h-5\"/>\n                <span className=\"font-medium\">{item.name}</span>\n                </Link>\n            </li>);\n        })}\n        </ul>\n      </nav>\n      \n\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n            <User className=\"text-muted-foreground h-4 w-4\"/>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-user-name\">\n              Saurabh Buye\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\">Distribution Center</p>\n          </div>\n        </div>\n      </div>\n    </aside>);\n}\n","size_bytes":2769},"client/src/hooks/use-mobile.jsx":{"content":"import React, { useState, useEffect } from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(undefined);\n\n  useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n","size_bytes":563},"client/src/hooks/use-toast.js":{"content":"var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from \"react\";\nvar TOAST_LIMIT = 1;\nvar TOAST_REMOVE_DELAY = 1000000;\nvar actionTypes = {\n    ADD_TOAST: \"ADD_TOAST\",\n    UPDATE_TOAST: \"UPDATE_TOAST\",\n    DISMISS_TOAST: \"DISMISS_TOAST\",\n    REMOVE_TOAST: \"REMOVE_TOAST\",\n};\nvar count = 0;\nfunction genId() {\n    count = (count + 1) % Number.MAX_SAFE_INTEGER;\n    return count.toString();\n}\nvar toastTimeouts = new Map();\nvar addToRemoveQueue = function (toastId) {\n    if (toastTimeouts.has(toastId)) {\n        return;\n    }\n    var timeout = setTimeout(function () {\n        toastTimeouts.delete(toastId);\n        dispatch({\n            type: \"REMOVE_TOAST\",\n            toastId: toastId,\n        });\n    }, TOAST_REMOVE_DELAY);\n    toastTimeouts.set(toastId, timeout);\n};\nexport var reducer = function (state, action) {\n    switch (action.type) {\n        case \"ADD_TOAST\":\n            return __assign(__assign({}, state), { toasts: __spreadArray([action.toast], state.toasts, true).slice(0, TOAST_LIMIT) });\n        case \"UPDATE_TOAST\":\n            return __assign(__assign({}, state), { toasts: state.toasts.map(function (t) {\n                    return t.id === action.toast.id ? __assign(__assign({}, t), action.toast) : t;\n                }) });\n        case \"DISMISS_TOAST\": {\n            var toastId_1 = action.toastId;\n            // ! Side effects ! - This could be extracted into a dismissToast() action,\n            // but I'll keep it here for simplicity\n            if (toastId_1) {\n                addToRemoveQueue(toastId_1);\n            }\n            else {\n                state.toasts.forEach(function (toast) {\n                    addToRemoveQueue(toast.id);\n                });\n            }\n            return __assign(__assign({}, state), { toasts: state.toasts.map(function (t) {\n                    return t.id === toastId_1 || toastId_1 === undefined\n                        ? __assign(__assign({}, t), { open: false }) : t;\n                }) });\n        }\n        case \"REMOVE_TOAST\":\n            if (action.toastId === undefined) {\n                return __assign(__assign({}, state), { toasts: [] });\n            }\n            return __assign(__assign({}, state), { toasts: state.toasts.filter(function (t) { return t.id !== action.toastId; }) });\n    }\n};\nvar listeners = [];\nvar memoryState = { toasts: [] };\nfunction dispatch(action) {\n    memoryState = reducer(memoryState, action);\n    listeners.forEach(function (listener) {\n        listener(memoryState);\n    });\n}\nfunction toast(_a) {\n    var props = __rest(_a, []);\n    var id = genId();\n    var update = function (props) {\n        return dispatch({\n            type: \"UPDATE_TOAST\",\n            toast: __assign(__assign({}, props), { id: id }),\n        });\n    };\n    var dismiss = function () { return dispatch({ type: \"DISMISS_TOAST\", toastId: id }); };\n    dispatch({\n        type: \"ADD_TOAST\",\n        toast: __assign(__assign({}, props), { id: id, open: true, onOpenChange: function (open) {\n                if (!open)\n                    dismiss();\n            } }),\n    });\n    return {\n        id: id,\n        dismiss: dismiss,\n        update: update,\n    };\n}\nfunction useToast() {\n    var _a = React.useState(memoryState), state = _a[0], setState = _a[1];\n    React.useEffect(function () {\n        listeners.push(setState);\n        return function () {\n            var index = listeners.indexOf(setState);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        };\n    }, [state]);\n    return __assign(__assign({}, state), { toast: toast, dismiss: function (toastId) { return dispatch({ type: \"DISMISS_TOAST\", toastId: toastId }); } });\n}\nexport { useToast, toast };\n","size_bytes":4930},"client/src/lib/queryClient.js":{"content":"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { QueryClient } from \"@tanstack/react-query\";\nfunction throwIfResNotOk(res) {\n    return __awaiter(this, void 0, void 0, function () {\n        var text;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!!res.ok) return [3 /*break*/, 2];\n                    return [4 /*yield*/, res.text()];\n                case 1:\n                    text = (_a.sent()) || res.statusText;\n                    throw new Error(\"\".concat(res.status, \": \").concat(text));\n                case 2: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function apiRequest(method, url, data) {\n    return __awaiter(this, void 0, void 0, function () {\n        var res;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, fetch(url, {\n                        method: method,\n                        headers: data ? { \"Content-Type\": \"application/json\" } : {},\n                        body: data ? JSON.stringify(data) : undefined,\n                        credentials: \"include\",\n                    })];\n                case 1:\n                    res = _a.sent();\n                    return [4 /*yield*/, throwIfResNotOk(res)];\n                case 2:\n                    _a.sent();\n                    return [2 /*return*/, res];\n            }\n        });\n    });\n}\nexport var getQueryFn = function (_a) {\n    var unauthorizedBehavior = _a.on401;\n    return function (_a) { return __awaiter(void 0, [_a], void 0, function (_b) {\n        var url, params_1, queryParams, queryString, res;\n        var queryKey = _b.queryKey;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    url = queryKey[0];\n                    // If there's a second element and it's an object, convert to query params\n                    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n                        params_1 = new URLSearchParams();\n                        queryParams = queryKey[1];\n                        Object.entries(queryParams).forEach(function (_a) {\n                            var key = _a[0], value = _a[1];\n                            if (value !== undefined && value !== null && value !== '') {\n                                params_1.append(key, value);\n                            }\n                        });\n                        queryString = params_1.toString();\n                        if (queryString) {\n                            url += '?' + queryString;\n                        }\n                    }\n                    else if (queryKey.length > 1) {\n                        // For non-object additional segments, join as path\n                        url = queryKey.join(\"/\");\n                    }\n                    return [4 /*yield*/, fetch(url, {\n                            credentials: \"include\",\n                        })];\n                case 1:\n                    res = _c.sent();\n                    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n                        return [2 /*return*/, null];\n                    }\n                    return [4 /*yield*/, throwIfResNotOk(res)];\n                case 2:\n                    _c.sent();\n                    return [4 /*yield*/, res.json()];\n                case 3: return [2 /*return*/, _c.sent()];\n            }\n        });\n    }); };\n};\nexport var queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            queryFn: getQueryFn({ on401: \"throw\" }),\n            refetchInterval: false,\n            refetchOnWindowFocus: false,\n            staleTime: Infinity,\n            retry: false,\n        },\n        mutations: {\n            retry: false,\n        },\n    },\n});\n","size_bytes":6444},"client/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nexport function cn() {\n    var inputs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputs[_i] = arguments[_i];\n    }\n    return twMerge(clsx(inputs));\n}\n","size_bytes":245},"client/src/pages/dashboard.jsx":{"content":"import * as React from \"react\";\nimport Layout from \"@/components/Layout\";\nimport MetricsCards from \"@/components/MetricsCards\";\nimport DepartmentOverview from \"@/components/DepartmentOverview\";\nimport ParcelTable from \"@/components/ParcelTable\";\nimport ConfigurationModal from \"@/components/ConfigurationModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { RotateCcw, Settings, Upload } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const [isConfigOpen, setIsConfigOpen] = useState(false);\n  const [uploadFile, setUploadFile] = useState(null);\n  const fileInputRef = React.useRef(null);\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n    refetchOnMount: true,\n    staleTime: 0,\n    gcTime: 0,\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/reset\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to reset data\");\n      }\n\n      setUploadFile(null);\n      await queryClient.invalidateQueries();\n      await Promise.all([\n        queryClient.refetchQueries({\n          queryKey: [\"/api/dashboard/metrics\"],\n          exact: true,\n        }),\n        queryClient.refetchQueries({\n          queryKey: [\"/api/parcels\"],\n          exact: false,\n        }),\n        queryClient.refetchQueries({\n          queryKey: [\"/api/business-rules\"],\n          exact: true,\n        }),\n      ]);\n    },\n    onSuccess: () => {\n      queryClient.refetchQueries({\n        queryKey: [\"/api/dashboard/metrics\"],\n        exact: true,\n      });\n      toast({\n        title: \"Success\",\n        description: \"All data has been refreshed\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Refresh Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file) => {\n      const formData = new FormData();\n      formData.append(\"xmlFile\", file);\n\n      const response = await fetch(\"/api/parcels/upload-xml\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`Upload failed: ${text}`);\n      }\n\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      Promise.all([\n        queryClient.refetchQueries({\n          queryKey: [\"/api/dashboard/metrics\"],\n          exact: true,\n        }),\n        queryClient.refetchQueries({\n          queryKey: [\"/api/parcels\"],\n          exact: false,\n        }),\n      ]);\n\n      const fileInput = document.querySelector('input[type=\"file\"]');\n      if (fileInput) {\n        fileInput.value = \"\";\n      }\n      setUploadFile(null);\n\n      toast({\n        title: \"Success\",\n        description: `Successfully processed ${\n          data.parcels?.length || 0\n        } parcels`,\n      });\n    },\n    onError: (error) => {\n      const fileInput = document.querySelector('input[type=\"file\"]');\n      if (fileInput) {\n        fileInput.value = \"\";\n      }\n      setUploadFile(null);\n\n      toast({\n        title: \"Upload Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRefresh = () => {\n    refreshMutation.mutate();\n  };\n\n  const resetFileInput = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n    setUploadFile(null);\n  };\n\n  const handleFileUpload = () => {\n    if (uploadFile) {\n      uploadMutation.mutate(uploadFile);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (\n        file.type === \"text/xml\" ||\n        file.name.toLowerCase().endsWith(\".xml\")\n      ) {\n        setUploadFile(file);\n      } else {\n        resetFileInput();\n        toast({\n          title: \"Invalid File\",\n          description: \"Please select a valid XML file\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-bold text-foreground\">\n              Parcel Processing Dashboard\n            </h2>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"file\"\n                  accept=\".xml\"\n                  onChange={handleFileChange}\n                  className=\"w-48\"\n                  data-testid=\"input-xml-file\"\n                />\n                <Button\n                  onClick={handleFileUpload}\n                  disabled={!uploadFile || uploadMutation.isPending}\n                  data-testid=\"button-upload-xml\"\n                >\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  {uploadMutation.isPending ? \"Processing...\" : \"Upload XML\"}\n                </Button>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={handleRefresh}\n                disabled={refreshMutation.isPending}\n                data-testid=\"button-refresh\"\n              >\n                <RotateCcw\n                  className={`h-4 w-4 mr-2 ${\n                    refreshMutation.isPending ? \"animate-spin\" : \"\"\n                  }`}\n                />\n                Refresh\n              </Button>\n              <Button\n                onClick={() => setIsConfigOpen(true)}\n                data-testid=\"button-configure-rules\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Configure Rules\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"flex-1 overflow-auto\">\n          <div className=\"p-6 space-y-6\">\n            <MetricsCards metrics={metrics} isLoading={metricsLoading} />\n            <DepartmentOverview metrics={metrics} isLoading={metricsLoading} />\n            <ParcelTable />\n          </div>\n        </div>\n      </div>\n\n      <ConfigurationModal\n        isOpen={isConfigOpen}\n        onClose={() => setIsConfigOpen(false)}\n      />\n    </Layout>\n  );\n}\n","size_bytes":6715},"client/src/pages/not-found.jsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\nexport default function NotFound() {\n    return (<div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\"/>\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>);\n}\n","size_bytes":703},"client/src/components/ui/badge.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nvar badgeVariants = cva(\"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\", {\n    variants: {\n        variant: {\n            default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n            secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n            outline: \"text-foreground\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n});\nfunction Badge(_a) {\n    var className = _a.className, variant = _a.variant, props = __rest(_a, [\"className\", \"variant\"]);\n    return (<div className={cn(badgeVariants({ variant: variant }), className)} {...props}/>);\n}\nexport { Badge, badgeVariants };\n","size_bytes":1527},"client/src/components/ui/button.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nvar buttonVariants = cva(\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n        },\n        size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\nvar Button = React.forwardRef(function (_a, ref) {\n    var className = _a.className, variant = _a.variant, size = _a.size, _b = _a.asChild, asChild = _b === void 0 ? false : _b, props = __rest(_a, [\"className\", \"variant\", \"size\", \"asChild\"]);\n    var Comp = asChild ? Slot : \"button\";\n    return (<Comp className={cn(buttonVariants({ variant: variant, size: size, className: className }))} ref={ref} {...props}/>);\n});\nButton.displayName = \"Button\";\nexport { Button, buttonVariants };\n","size_bytes":2326},"client/src/components/ui/card.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nvar Card = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div ref={ref} className={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className)} {...props}/>);\n});\nCard.displayName = \"Card\";\nvar CardHeader = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props}/>);\n});\nCardHeader.displayName = \"CardHeader\";\nvar CardTitle = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div ref={ref} className={cn(\"text-2xl font-semibold leading-none tracking-tight\", className)} {...props}/>);\n});\nCardTitle.displayName = \"CardTitle\";\nvar CardDescription = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props}/>);\n});\nCardDescription.displayName = \"CardDescription\";\nvar CardContent = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props}/>);\n});\nCardContent.displayName = \"CardContent\";\nvar CardFooter = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props}/>);\n});\nCardFooter.displayName = \"CardFooter\";\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n","size_bytes":2268},"client/src/components/ui/checkbox.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nvar Checkbox = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<CheckboxPrimitive.Root ref={ref} className={cn(\"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\", className)} {...props}>\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\"/>\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>);\n});\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\nexport { Checkbox };\n","size_bytes":1452},"client/src/components/ui/dialog.jsx":{"content":"\"use client\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nvar Dialog = DialogPrimitive.Root;\nvar DialogTrigger = DialogPrimitive.Trigger;\nvar DialogPortal = DialogPrimitive.Portal;\nvar DialogClose = DialogPrimitive.Close;\nvar DialogOverlay = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<DialogPrimitive.Overlay ref={ref} className={cn(\"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className)} {...props}/>);\n});\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\nvar DialogContent = React.forwardRef(function (_a, ref) {\n    var className = _a.className, children = _a.children, props = __rest(_a, [\"className\", \"children\"]);\n    return (<DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content ref={ref} className={cn(\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\", className)} {...props}>\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\"/>\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>);\n});\nDialogContent.displayName = DialogPrimitive.Content.displayName;\nvar DialogHeader = function (_a) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props}/>);\n};\nDialogHeader.displayName = \"DialogHeader\";\nvar DialogFooter = function (_a) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props}/>);\n};\nDialogFooter.displayName = \"DialogFooter\";\nvar DialogTitle = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<DialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)} {...props}/>);\n});\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\nvar DialogDescription = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props}/>);\n});\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\nexport { Dialog, DialogPortal, DialogOverlay, DialogClose, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription, };\n","size_bytes":3975},"client/src/components/ui/input.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nvar Input = React.forwardRef(function (_a, ref) {\n    var className = _a.className, type = _a.type, props = __rest(_a, [\"className\", \"type\"]);\n    return (<input type={type} className={cn(\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\", className)} ref={ref} {...props}/>);\n});\nInput.displayName = \"Input\";\nexport { Input };\n","size_bytes":1219},"client/src/components/ui/label.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nvar labelVariants = cva(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\");\nvar Label = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props}/>);\n});\nLabel.displayName = LabelPrimitive.Root.displayName;\nexport { Label };\n","size_bytes":1076},"client/src/components/ui/select.jsx":{"content":"\"use client\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nvar Select = SelectPrimitive.Root;\nvar SelectGroup = SelectPrimitive.Group;\nvar SelectValue = SelectPrimitive.Value;\nvar SelectTrigger = React.forwardRef(function (_a, ref) {\n    var className = _a.className, children = _a.children, props = __rest(_a, [\"className\", \"children\"]);\n    return (<SelectPrimitive.Trigger ref={ref} className={cn(\"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\", className)} {...props}>\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\"/>\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>);\n});\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\nvar SelectScrollUpButton = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<SelectPrimitive.ScrollUpButton ref={ref} className={cn(\"flex cursor-default items-center justify-center py-1\", className)} {...props}>\n    <ChevronUp className=\"h-4 w-4\"/>\n  </SelectPrimitive.ScrollUpButton>);\n});\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\nvar SelectScrollDownButton = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<SelectPrimitive.ScrollDownButton ref={ref} className={cn(\"flex cursor-default items-center justify-center py-1\", className)} {...props}>\n    <ChevronDown className=\"h-4 w-4\"/>\n  </SelectPrimitive.ScrollDownButton>);\n});\nSelectScrollDownButton.displayName =\n    SelectPrimitive.ScrollDownButton.displayName;\nvar SelectContent = React.forwardRef(function (_a, ref) {\n    var className = _a.className, children = _a.children, _b = _a.position, position = _b === void 0 ? \"popper\" : _b, props = __rest(_a, [\"className\", \"children\", \"position\"]);\n    return (<SelectPrimitive.Portal>\n    <SelectPrimitive.Content ref={ref} className={cn(\"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\", position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\", className)} position={position} {...props}>\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport className={cn(\"p-1\", position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\")}>\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>);\n});\nSelectContent.displayName = SelectPrimitive.Content.displayName;\nvar SelectLabel = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props}/>);\n});\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\nvar SelectItem = React.forwardRef(function (_a, ref) {\n    var className = _a.className, children = _a.children, props = __rest(_a, [\"className\", \"children\"]);\n    return (<SelectPrimitive.Item ref={ref} className={cn(\"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className)} {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\"/>\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>);\n});\nSelectItem.displayName = SelectPrimitive.Item.displayName;\nvar SelectSeparator = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props}/>);\n});\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\nexport { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectLabel, SelectItem, SelectSeparator, SelectScrollUpButton, SelectScrollDownButton, };\n","size_bytes":5660},"client/src/components/ui/separator.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\nimport { cn } from \"@/lib/utils\";\nvar Separator = React.forwardRef(function (_a, ref) {\n    var className = _a.className, _b = _a.orientation, orientation = _b === void 0 ? \"horizontal\" : _b, _c = _a.decorative, decorative = _c === void 0 ? true : _c, props = __rest(_a, [\"className\", \"orientation\", \"decorative\"]);\n    return (<SeparatorPrimitive.Root ref={ref} decorative={decorative} orientation={orientation} className={cn(\"shrink-0 bg-border\", orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\", className)} {...props}/>);\n});\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\nexport { Separator };\n","size_bytes":1219},"client/src/components/ui/skeleton.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { cn } from \"@/lib/utils\";\nfunction Skeleton(_a) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div className={cn(\"animate-pulse rounded-md bg-muted\", className)} {...props}/>);\n}\nexport { Skeleton };\n","size_bytes":736},"client/src/components/ui/table.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nvar Table = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<div className=\"relative w-full overflow-auto\">\n    <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props}/>\n  </div>);\n});\nTable.displayName = \"Table\";\nvar TableHeader = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props}/>);\n});\nTableHeader.displayName = \"TableHeader\";\nvar TableBody = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props}/>);\n});\nTableBody.displayName = \"TableBody\";\nvar TableFooter = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<tfoot ref={ref} className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)} {...props}/>);\n});\nTableFooter.displayName = \"TableFooter\";\nvar TableRow = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<tr ref={ref} className={cn(\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className)} {...props}/>);\n});\nTableRow.displayName = \"TableRow\";\nvar TableHead = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<th ref={ref} className={cn(\"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\", className)} {...props}/>);\n});\nTableHead.displayName = \"TableHead\";\nvar TableCell = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<td ref={ref} className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)} {...props}/>);\n});\nTableCell.displayName = \"TableCell\";\nvar TableCaption = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props}/>);\n});\nTableCaption.displayName = \"TableCaption\";\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption, };\n","size_bytes":2999},"client/src/components/ui/toast.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nvar ToastProvider = ToastPrimitives.Provider;\nvar ToastViewport = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<ToastPrimitives.Viewport ref={ref} className={cn(\"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\", className)} {...props}/>);\n});\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\nvar toastVariants = cva(\"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\", {\n    variants: {\n        variant: {\n            default: \"border bg-background text-foreground\",\n            destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n});\nvar Toast = React.forwardRef(function (_a, ref) {\n    var className = _a.className, variant = _a.variant, props = __rest(_a, [\"className\", \"variant\"]);\n    return (<ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant: variant }), className)} {...props}/>);\n});\nToast.displayName = ToastPrimitives.Root.displayName;\nvar ToastAction = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<ToastPrimitives.Action ref={ref} className={cn(\"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\", className)} {...props}/>);\n});\nToastAction.displayName = ToastPrimitives.Action.displayName;\nvar ToastClose = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<ToastPrimitives.Close ref={ref} className={cn(\"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\", className)} toast-close=\"\" {...props}>\n    <X className=\"h-4 w-4\"/>\n  </ToastPrimitives.Close>);\n});\nToastClose.displayName = ToastPrimitives.Close.displayName;\nvar ToastTitle = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<ToastPrimitives.Title ref={ref} className={cn(\"text-sm font-semibold\", className)} {...props}/>);\n});\nToastTitle.displayName = ToastPrimitives.Title.displayName;\nvar ToastDescription = React.forwardRef(function (_a, ref) {\n    var className = _a.className, props = __rest(_a, [\"className\"]);\n    return (<ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props}/>);\n});\nToastDescription.displayName = ToastPrimitives.Description.displayName;\nexport { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction, };\n","size_bytes":4617},"client/src/components/ui/toaster.jsx":{"content":"var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport, } from \"@/components/ui/toast\";\nexport function Toaster() {\n    var toasts = useToast().toasts;\n    return (<ToastProvider>\n      {toasts.map(function (_a) {\n            var id = _a.id, title = _a.title, description = _a.description, action = _a.action, props = __rest(_a, [\"id\", \"title\", \"description\", \"action\"]);\n            return (<Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (<ToastDescription>{description}</ToastDescription>)}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>);\n        })}\n      <ToastViewport />\n    </ToastProvider>);\n}\n","size_bytes":1321},"client/src/components/ui/tooltip.jsx":{"content":"\"use client\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\nimport { cn } from \"@/lib/utils\";\nvar TooltipProvider = TooltipPrimitive.Provider;\nvar Tooltip = TooltipPrimitive.Root;\nvar TooltipTrigger = TooltipPrimitive.Trigger;\nvar TooltipContent = React.forwardRef(function (_a, ref) {\n    var className = _a.className, _b = _a.sideOffset, sideOffset = _b === void 0 ? 4 : _b, props = __rest(_a, [\"className\", \"sideOffset\"]);\n    return (<TooltipPrimitive.Content ref={ref} sideOffset={sideOffset} className={cn(\"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\", className)} {...props}/>);\n});\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n","size_bytes":1657}},"version":1}